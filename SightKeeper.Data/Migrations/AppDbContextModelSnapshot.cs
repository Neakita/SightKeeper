// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SightKeeper.Data;

#nullable disable

namespace SightKeeper.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("SightKeeper.Data.DbWeightsData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WeightsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeightsId", "Format")
                        .IsUnique();

                    b.ToTable("WeightsData", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Asset", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Usage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.AssetsLibrary", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AssetsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.DataSet", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Resolution")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.DetectorItem", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ItemClassId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Bounding", "SightKeeper.Domain.Model.DataSets.DetectorItem.Bounding#Bounding", b1 =>
                        {
                            b1.ComplexProperty<Dictionary<string, object>>("Position", "SightKeeper.Domain.Model.DataSets.DetectorItem.Bounding#Bounding.Position#Vector2<double>", b2 =>
                                {
                                    b2.Property<double>("X")
                                        .HasColumnType("REAL")
                                        .HasColumnName("BoundingXPosition");

                                    b2.Property<double>("Y")
                                        .HasColumnType("REAL")
                                        .HasColumnName("BoundingYPosition");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Size", "SightKeeper.Domain.Model.DataSets.DetectorItem.Bounding#Bounding.Size#Vector2<double>", b2 =>
                                {
                                    b2.Property<double>("X")
                                        .HasColumnType("REAL")
                                        .HasColumnName("BoundingXSize");

                                    b2.Property<double>("Y")
                                        .HasColumnType("REAL")
                                        .HasColumnName("BoundingYSize");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ItemClassId");

                    b.ToTable("DetectorItems", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Image", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ItemClass", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DataSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.ToTable("ItemClasses", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Screenshot", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Screenshots", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ScreenshotsLibrary", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<ushort?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ScreenshotsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Weights", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("WeightsMetrics", "SightKeeper.Domain.Model.DataSets.Weights.WeightsMetrics#WeightsMetrics", b1 =>
                        {
                            b1.Property<uint>("Epoch")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Epoch");

                            b1.ComplexProperty<Dictionary<string, object>>("LossMetrics", "SightKeeper.Domain.Model.DataSets.Weights.WeightsMetrics#WeightsMetrics.LossMetrics#LossMetrics", b2 =>
                                {
                                    b2.Property<float>("BoundingLoss")
                                        .HasColumnType("REAL")
                                        .HasColumnName("BoundingLoss");

                                    b2.Property<float>("ClassificationLoss")
                                        .HasColumnType("REAL")
                                        .HasColumnName("ClassificationLoss");

                                    b2.Property<float>("DeformationLoss")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DeformationLoss");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.WeightsLibrary", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeightsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Game", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecutablePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.PreemptionSettings", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Factor", "SightKeeper.Domain.Model.Profiles.PreemptionSettings.Factor#Vector2<float>", b1 =>
                        {
                            b1.Property<float>("X")
                                .HasColumnType("REAL")
                                .HasColumnName("PreemptionHorizontalFactor");

                            b1.Property<float>("Y")
                                .HasColumnType("REAL")
                                .HasColumnName("PreemptionVerticalFactor");
                        });

                    b.HasKey("Id");

                    b.ToTable("PreemptionSettings");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.Profile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("DetectionThreshold")
                        .HasColumnType("REAL");

                    b.Property<float>("MouseSensitivity")
                        .HasColumnType("REAL");

                    b.Property<float>("MouseSmoothing")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("PostProcessDelay")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WeightsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("WeightsId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.ProfileItemClass", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivationCondition")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ItemClassId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Offset", "SightKeeper.Domain.Model.Profiles.ProfileItemClass.Offset#Vector2<float>", b1 =>
                        {
                            b1.Property<float>("X")
                                .HasColumnType("REAL")
                                .HasColumnName("HorizontalOffset");

                            b1.Property<float>("Y")
                                .HasColumnType("REAL")
                                .HasColumnName("VerticalOffset");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ItemClassId");

                    b.HasIndex("ProfileId", "ItemClassId")
                        .IsUnique();

                    b.ToTable("ProfileItemClasses", (string)null);
                });

            modelBuilder.Entity("WeightsItemClasses", b =>
                {
                    b.Property<long>("WeightsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ItemClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WeightsId", "ItemClassId");

                    b.HasIndex("ItemClassId");

                    b.ToTable("WeightsItemClasses");
                });

            modelBuilder.Entity("SightKeeper.Data.DbWeightsData", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.Weights", "Weights")
                        .WithMany()
                        .HasForeignKey("WeightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SightKeeper.Domain.Model.DataSets.WeightsData", "Data", b1 =>
                        {
                            b1.Property<long>("DbWeightsDataId")
                                .HasColumnType("INTEGER");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("BLOB")
                                .HasColumnName("Content");

                            b1.HasKey("DbWeightsDataId");

                            b1.ToTable("WeightsData");

                            b1.WithOwner()
                                .HasForeignKey("DbWeightsDataId");
                        });

                    b.Navigation("Data")
                        .IsRequired();

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Asset", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.Screenshot", "Screenshot")
                        .WithOne("Asset")
                        .HasForeignKey("SightKeeper.Domain.Model.DataSets.Asset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.DataSets.AssetsLibrary", "Library")
                        .WithMany("_assets")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");

                    b.Navigation("Screenshot");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.AssetsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.DataSet", "DataSet")
                        .WithOne("Assets")
                        .HasForeignKey("SightKeeper.Domain.Model.DataSets.AssetsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.DataSet", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.DetectorItem", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.Asset", "Asset")
                        .WithMany("Items")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.DataSets.ItemClass", "ItemClass")
                        .WithMany("Items")
                        .HasForeignKey("ItemClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("ItemClass");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Image", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.Screenshot", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.DataSets.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ItemClass", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.DataSet", "DataSet")
                        .WithMany("ItemClasses")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Screenshot", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.ScreenshotsLibrary", "Library")
                        .WithMany("_screenshots")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ScreenshotsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.DataSet", "DataSet")
                        .WithOne("Screenshots")
                        .HasForeignKey("SightKeeper.Domain.Model.DataSets.ScreenshotsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Weights", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.WeightsLibrary", "Library")
                        .WithMany("_weights")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.WeightsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.DataSet", "DataSet")
                        .WithOne("Weights")
                        .HasForeignKey("SightKeeper.Domain.Model.DataSets.WeightsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.PreemptionSettings", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Profiles.Profile", null)
                        .WithOne("PreemptionSettings")
                        .HasForeignKey("SightKeeper.Domain.Model.Profiles.PreemptionSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SightKeeper.Domain.Model.Profiles.StabilizationSettings", "StabilizationSettings", b1 =>
                        {
                            b1.Property<long>("PreemptionSettingsId")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("BufferSize")
                                .HasColumnType("INTEGER")
                                .HasColumnName("PreemptionStabilizationBufferSize");

                            b1.Property<int>("Method")
                                .HasColumnType("INTEGER")
                                .HasColumnName("PreemptionStabilizationMethod");

                            b1.HasKey("PreemptionSettingsId");

                            b1.ToTable("PreemptionSettings");

                            b1.WithOwner()
                                .HasForeignKey("PreemptionSettingsId");
                        });

                    b.Navigation("StabilizationSettings");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.Profile", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.Weights", "Weights")
                        .WithMany()
                        .HasForeignKey("WeightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.ProfileItemClass", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.ItemClass", "ItemClass")
                        .WithMany()
                        .HasForeignKey("ItemClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Profiles.Profile", null)
                        .WithMany("ItemClasses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemClass");
                });

            modelBuilder.Entity("WeightsItemClasses", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSets.ItemClass", "ItemClass")
                        .WithMany()
                        .HasForeignKey("ItemClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.DataSets.Weights", "Weights")
                        .WithMany()
                        .HasForeignKey("WeightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemClass");

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Asset", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.AssetsLibrary", b =>
                {
                    b.Navigation("_assets");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.DataSet", b =>
                {
                    b.Navigation("Assets")
                        .IsRequired();

                    b.Navigation("ItemClasses");

                    b.Navigation("Screenshots")
                        .IsRequired();

                    b.Navigation("Weights")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ItemClass", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.Screenshot", b =>
                {
                    b.Navigation("Asset");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.ScreenshotsLibrary", b =>
                {
                    b.Navigation("_screenshots");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSets.WeightsLibrary", b =>
                {
                    b.Navigation("_weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profiles.Profile", b =>
                {
                    b.Navigation("ItemClasses");

                    b.Navigation("PreemptionSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
